"use client"

import React, { useEffect } from 'react';
import L from 'leaflet';
import { MapContainer, TileLayer, Circle, Popup, ZoomControl, ScaleControl, LayersControl, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

interface ChangeViewProps {
  center: [number, number];
  zoom: number;
}

interface VulnerabilityPoint {
  coordinates: [number, number];
  vulnerability: number;
}

interface PopulationVulnerabilityMapProps {
  center: [number, number];
  zoom: number;
  vulnerabilityPoints: VulnerabilityPoint[];
}

const ChangeView: React.FC<ChangeViewProps> = ({ center, zoom }) => {
  const map = useMap();
  
  useEffect(() => {
    map.setView(center, zoom);
  }, [center, zoom, map]);
  
  return null;
};

const PopulationVulnerabilityMap: React.FC<PopulationVulnerabilityMapProps> = ({ 
  center, 
  zoom,
  vulnerabilityPoints
}) => {
  const getVulnerabilityColor = (vulnerability: number): string => {
    const normalized = Math.min(Math.max(vulnerability, 0), 1);
    const red = Math.round(255 * normalized);
    const green = Math.round(255 * (1 - normalized));
    return `rgb(${red}, ${green}, 0)`;
  };

  return (
    <MapContainer 
      center={center} 
      zoom={zoom} 
      style={{ height: '100%', width: '100%' }} 
      zoomControl={false}
    >
      <ChangeView center={center} zoom={zoom} />
      
      <LayersControl position="topright">
        <LayersControl.BaseLayer checked name="Satellite">
          <TileLayer
            url="https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}"
            maxZoom={20}
            subdomains={['mt0', 'mt1', 'mt2', 'mt3']}
            attribution="&copy; Google"
          />
        </LayersControl.BaseLayer>
        <LayersControl.BaseLayer name="OpenStreetMap">
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />
        </LayersControl.BaseLayer>
      </LayersControl>

      {vulnerabilityPoints.map((point, index) => (
        <Circle
          key={index}
          center={point.coordinates}
          radius={500}
          pathOptions={{
            fillColor: getVulnerabilityColor(point.vulnerability),
            fillOpacity: 0.7,
            color: 'white',
            weight: 1
          }}
        >
          <Popup>
            Vulnerability Index: {(point.vulnerability * 100).toFixed(1)}%
          </Popup>
        </Circle>
      ))}

      <ZoomControl position="topright" />
      <ScaleControl position="bottomright" />
    </MapContainer>
  );
};

export default PopulationVulnerabilityMap;